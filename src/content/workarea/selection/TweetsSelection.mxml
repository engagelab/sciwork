<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*" gap="0">
	
	<fx:Declarations>
		<s:ArrayCollection id="tweetFeedArray" />
		<s:ArrayCollection id="hashTags" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import listeners.TweetSelectionBarEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.core.NavigationUnit;
			
			/**
			 * 
			 * public function to force scroll down on the list component
			 * 
			 **/
			public function scrollToBottom():void {
					var delta:Number = 0;
					var count:int = 0;
					
					while (count++ < 10){
						liveFeedList.validateNow();
						delta = liveFeedList.layout.getVerticalScrollPositionDelta(NavigationUnit.END);
						liveFeedList.layout.verticalScrollPosition += delta;
						
						if (delta == 0) {
							break;						
						}
					}
			}			
			
			/**
			 * 
			 * handles opening and closing the hash drawer
			 * 
			 **/
			protected function toggleHashDrawer(event:MouseEvent):void {
				if(this.currentState == "closed") {
					this.currentState = "opened";
				}
				else {
					this.currentState = "closed";
				}
			}
			
			/**
			 * 
			 * handles opening and closing the hash drawer
			 * 
			 **/
			protected function handleHashTag(event:Event):void {
				var tag:String = event.currentTarget.content;

				if(event.currentTarget.selected) {
					hashTags.addItem(tag);
				}
				else {
					hashTags.removeItemAt(hashTags.getItemIndex(tag));
				}
				
				refreshLiveFeed(hashTags);
			}
			
			protected function refreshLiveFeed(tagsArray:ArrayCollection):void {
				var tweetsToDisplay:ArrayCollection = new ArrayCollection();
				
				for each (var tweet:Object in tweetFeedArray) {
					if(tagsArray.length > 0) {
						for each (var tag:String in tagsArray) {
							if((tweet.tags as Array).indexOf(tag) > -1) {
								tweetsToDisplay.addItem(tweet);
							}
						}	
					}
					else {
						tweetsToDisplay.addItem(tweet);
					}
				}
				
				liveFeedList.dataProvider = tweetsToDisplay;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="closed" />
		<s:State name="opened" />
	</s:states>
	
	<components:SelectionHeader id="selectionheader" width="100%" height="30" currentState="tweets"/>
	<s:BorderContainer id="arrowDown" width="100%" backgroundColor="#999999" minHeight="30" skinClass="skins.hashPanelHeaderSkin">
		<s:VGroup width="100%" gap="0">
			<s:VGroup width="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" includeIn="opened">
				<s:CheckBox label="{sciwork.HASH_TAGS_ARRAY[0]}" color="#FFFFFF" change="handleHashTag(event)" />
				<s:CheckBox label="{sciwork.HASH_TAGS_ARRAY[1]}" color="#FFFFFF" change="handleHashTag(event)" />
				<s:CheckBox label="{sciwork.HASH_TAGS_ARRAY[2]}" color="#FFFFFF" change="handleHashTag(event)" />
				<s:CheckBox label="{sciwork.HASH_TAGS_ARRAY[3]}" color="#FFFFFF" change="handleHashTag(event)" />
				<s:CheckBox label="{sciwork.HASH_TAGS_ARRAY[4]}" color="#FFFFFF" change="handleHashTag(event)" />
				<s:CheckBox label="{sciwork.HASH_TAGS_ARRAY[5]}" color="#FFFFFF" change="handleHashTag(event)" />
			</s:VGroup>
			<s:BorderContainer width="100%" color="#888888" skinClass="skins.hashPanelHeaderSkin" click="toggleHashDrawer(event)" buttonMode="true" minHeight="30">
				<s:Image source="@Embed('assets/arrowd.png')" rotation.opened="180" horizontalCenter="0" verticalCenter="0" />
			</s:BorderContainer>
		</s:VGroup>
	</s:BorderContainer>
	<s:BorderContainer width="100%" height="100%" borderAlpha=".3" borderWeight="2">
		<s:List id="liveFeedList" top="10" left="10" right="10" bottom="10" selectionColor="#FFFFFF" horizontalScrollPolicy="off" dataProvider="{tweetFeedArray}" borderVisible="false" itemRenderer="itemRenderers.TweetItem">
			<s:layout>
				<s:VerticalLayout gap="2" horizontalAlign="contentJustify" variableRowHeight="true" />
			</s:layout>
		</s:List>
	</s:BorderContainer>
</s:VGroup>

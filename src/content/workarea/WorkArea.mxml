<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:materials="content.workarea.materials.*" xmlns:preview="content.workarea.preview.*" xmlns:workarea="content.workarea.*" creationComplete="initWorkArea(event)" xmlns:selection="content.workarea.selection.*">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import listeners.MaterialToPreviewEvent;
			import listeners.SubmitKeywordsEvent;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.TextOperationEvent;
			
			/**
			 * 
			 * Event handling method for creationComplete
			 * 
			 **/
			protected function initWorkArea(event:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'MATERIAL_TO_PREVIEW'), handleMaterialRequest);
				this.addEventListener(resourceManager.getString('resources', 'KEYWORD_LIST_SUBMITTED'), handleKeywordsSubmitted);
				this.addEventListener(resourceManager.getString('resources', 'EDIT_KEYWORD_LIST'), handleEditKeywords);
			}
			
			/**
			 * 
			 * Event handling method for MATERIAL_TO_PREVIEW
			 * 
			 **/
			protected function handleMaterialRequest(evt:MaterialToPreviewEvent):void {
				preview.previewMaterial(evt.previewType, evt.fullSizeSource, evt.previewSource);
			}
			
			/**
			 * 
			 * Event handling method for KEYWORD_LIST_SUBMITTED
			 * 
			 **/
			protected function handleKeywordsSubmitted(evt:SubmitKeywordsEvent):void {
				//build the object to post
				var params:Object = new Object();
				params.groupId = currentGroup.id;
				params.taskId = taskId;
				params.keywords = evt.keywords;
				
				//create urlrequest with correct headers
				var urlRequest:URLRequest = new URLRequest(resourceManager.getString('resources', 'SERVER_URL') + "/keywords");
				urlRequest.method = URLRequestMethod.POST;
				urlRequest.contentType = "application/json";
				urlRequest.data = com.adobe.serialization.json.JSON.encode(params);
				
				//load the url and define listeners
				var uploader:URLLoader = new URLLoader();
				uploader.addEventListener(Event.COMPLETE, handlePostKeywordsComplete);
				uploader.addEventListener(IOErrorEvent.IO_ERROR, handlePostKeywordsIOerror);
				uploader.load(urlRequest);
			}
			
			/**
			 * 
			 * Event handling method handlePostKeywordsComplete
			 * 
			 **/
			protected function handlePostKeywordsComplete(ev:Event):void {
				//extract result as JSON
				var res:Object = com.adobe.serialization.json.JSON.decode(String(ev.target.data));
				updateKeywordsList(res.keywords);
			}
			
			/**
			 * 
			 * Event handling method handlePostKeywordsIOerror
			 * 
			 **/
			protected function handlePostKeywordsIOerror(ev:IOErrorEvent):void {
				Alert.show("An error occured while posting the keywords from the server.", "Keyword service error");
			}
			
			
			
			/**
			 * 
			 * Switch layout to correct state based on task type
			 * 
			 **/
			public function updateCurrentState(type:String):void {
				switch(type)
				{
					case 'keywords':
					{
						//set correct state in subsequent components
						this.currentState = "keywords";
						selection.currentState = "keywords";
						preview.currentState = "keywordsState";
						
						//get existing keywords for the current task and group
						getKeywords.url = resourceManager.getString('resources', 'SERVER_URL') + "/keywords/" + currentGroup.id + "/" + taskId;
						getKeywords.send();
						break;
					}
						
					default:
					{
						this.currentState = "default";
						selection.currentState = "default";
						preview.currentState = "default";
						break;
					}
				}
			}
			
			/**
			 * 
			 * Error handling method for getKeywords service
			 * 
			 **/
			protected function getKeywords_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving the keywords from the server.", "Keyword service error");
			}
			
			/**
			 *
			 * Result handling method for getKeywords service 
			 * 
			 **/
			protected function getKeywords_resultHandler(event:ResultEvent):void {
				//store the returned object as JSON 
				var res:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				
				if(res.keywords != null) {
					updateKeywordsList(res.keywords);
				}
			}
			
			/**
			 *
			 * Update UI with keywords list 
			 * 
			 **/
			protected function updateKeywordsList(kWords:Array):void {
				if(kWords.length == 5) {
					//update keywords list
					selection.keywordSelection.addNewWords(kWords);
					
					//reset input field
					keywordInput.wordInput.text = "";
				}
			}
			
			/**
			 * 
			 * Event handling method for EDIT_KEYWORD_LIST
			 * 
			 **/
			protected function handleEditKeywords(evt:Event):void {
				//rebuild the keywords string
				var wordString:String = "";
				for each (var word:Object in selection.keywordSelection.wordArray) {
					wordString = wordString + word + " ";
				}
				
				//clear the selection
				selection.keywordSelection.clearWordList();
				
				//append the keywords in the text input
				keywordInput.wordInput.text = wordString.substr(0, wordString.length-1);
				keywordInput.wordInput.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGE, true));
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:HTTPService method="GET" result="getKeywords_resultHandler(event)" fault="getKeywords_faultHandler(event)" resultFormat="text" id="getKeywords" />
		<fx:Object id="currentGroup" />
		<fx:uint id="taskId" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="keywords" />
	</s:states>
	
	<s:HGroup width="100%" height="100%" gap="{sciwork._gapBetweenContainers}">
		<s:VGroup width="100%" height="100%" gap="{sciwork._gapBetweenContainers}">
			<preview:Preview id="preview" width="100%" height="100%" />
			<materials:Materials id="materials" width="100%" height="150" excludeFrom="keywords" />
			<workarea:KeywordInput id="keywordInput" width="100%" height="50" includeIn="keywords" />
		</s:VGroup>
		<selection:Selection id="selection" width="200" height="100%" />
	</s:HGroup>
</s:Group>

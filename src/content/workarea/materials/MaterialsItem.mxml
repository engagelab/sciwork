<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" width="70" height="50" xmlns:local="*" buttonMode="true">
	
	<fx:Declarations>
		<fx:String id="xpos" />
		<fx:String id="ypos" />
		<fx:String id="sourceType" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import content.workarea.WorkArea;
			
			import listeners.MaterialToPreviewEvent;
			import listeners.SelectMaterialEvent;
			
			import mx.events.FlexEvent;
			
			private var _previewType:String;
			private var _previewSource:String;
			private var _fullSizeSource:String;
			
			private var _isPortfolio:String;
			
			[Bindable] private var groupColour:uint = uint(mx.core.FlexGlobals.topLevelApplication.currentGroup.colour);
				
			public function get isPortfolio():String
			{
				return _isPortfolio;
			}

			public function set isPortfolio(value:String):void
			{
				_isPortfolio = value;
				if(value == "true") {
					deleter.visible = true;
				}
				else {
					deleter.visible = false;
				}
			}

			public function get fullSizeSource():String
			{
				return _fullSizeSource;
			}

			public function get previewSource():String
			{
				return _previewSource;
			}

			public function get previewType():String
			{
				return _previewType;
			}

			/**
			 * 
			 * Called from the instantiator to set up preview type and source
			 * 
			 **/
			public function setupPreview(previewType:String, fullSizeSource:String, previewSource:String):void {
				_previewType = previewType;
				_fullSizeSource = fullSizeSource;
				_previewSource = previewSource;
				
				switch(previewType) {
					case WorkArea.IMAGE_TYPE:
						sourceImage.source = previewSource;
						sourceImage.visible = true;
						break;
					case WorkArea.VIDEO_TYPE :
						sourceImage.source = previewSource;
						sourceImage.visible = true;
						break;
				}
			}
				
			protected function onSelected(event:FlexEvent):void {
				var mtpe:MaterialToPreviewEvent = new MaterialToPreviewEvent(resourceManager.getString('resources', 'MATERIAL_TO_PREVIEW'), true);
				mtpe.materialItem = this;
				mtpe.sourceType = sourceType;
				dispatchEvent(mtpe);
			}
			
			protected function deleteItemFromPortfolio(event:MouseEvent):void {
				var sme:SelectMaterialEvent = new SelectMaterialEvent(resourceManager.getString('resources', 'ADD_MATERIAL_TO_PORTFOLIO'), true);
				sme.materialItem = this;
				sme.addToPortolio = "false";
				dispatchEvent(sme);
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered"  />
		<s:State name="selected" enterState="onSelected(event)"/>
	</s:states>
	
	
	<!-- <s:Label id="title" x="2" y="2" width="126" color="0xffff00" text="Test" /> -->
	<s:Group width="70" height="50">
		<s:Rect left="0" right="0" top="0" bottom="0">
			<s:fill>
				<s:SolidColor color="0x000000" />
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="{groupColour}" weight="3"/>
			</s:stroke>
		</s:Rect>

		<s:Image id="sourceImage" visible="false" horizontalCenter="0" verticalCenter="0" top="3" right="3" bottom="3" left="3" scaleMode="letterbox" />
		
		<s:Group width="100%" height="100%" click="currentState='selected';">
			<s:Rect left="3" right="3" top="3" bottom="3">
				<s:fill>
					<s:SolidColor color="0x000000" alpha=".5" alpha.hovered="0" alpha.selected="0" />
				</s:fill>
			</s:Rect>
			<s:Image source="@Embed('assets/15-play.png')" horizontalCenter="0" verticalCenter="0" excludeFrom="hovered, selected" />
		</s:Group>
	</s:Group>

	<s:Image id="deleter" source="@Embed('assets/close.png')" width="10" height="10" top="0" right="-15" backgroundColor.hovered="#CCCCCC" click="deleteItemFromPortfolio(event)" />
	
	
</s:ItemRenderer>

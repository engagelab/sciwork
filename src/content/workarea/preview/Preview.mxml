<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:preview="content.workarea.preview.*" 
		 xmlns:components="components.*" 
		 gap="0" creationComplete="initGroup(event)">
	
	<fx:Declarations>
		<fx:String id="taskType" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import content.workarea.WorkArea;
			import content.workarea.materials.MaterialsItem;
			
			import listeners.SelectMaterialEvent;
			import listeners.ShowFullscreenEvent;
			
			import mx.events.FlexEvent;
			
			private var _currentMaterialItem:MaterialsItem;
			
			/**
			 * 
			 * Creates the preview of each material, based on material type
			 * 
			 **/
			public function previewMaterial(materialItem:MaterialsItem, sourceType:String):void {
				_currentMaterialItem = materialItem;
				
				switch(_currentMaterialItem.previewType) {
					case WorkArea.IMAGE_TYPE:
						imageViewer.setupPreview(_currentMaterialItem.previewType, _currentMaterialItem.fullSizeSource);
						this.currentState = "imageState";
						break;
					case WorkArea.VIDEO_TYPE :
						videoViewer.player.pauseVideo();
						videoViewer.setupPreview(_currentMaterialItem.previewType, _currentMaterialItem.fullSizeSource);
						this.currentState = "videoState";
						break;
				}
				
				if(sourceType == "TWEETS") {
					sender.visible = false;
				}
				else if(sourceType == "QUESTIONS") {
					sender.visible = false;
				}
				else {
					if(_currentMaterialItem.isPortfolio == "true") {
						sender.visible = false;
					}
					else {
						sender.visible = true;
					}
				}
			}
			
			/**
			 * 
			 * Handles click on "LEVER" button
			 * 
			 **/
			protected function sendPreviewedMaterial(event:MouseEvent):void {
				var sme:SelectMaterialEvent = new SelectMaterialEvent(resourceManager.getString('resources', 'ADD_MATERIAL_TO_PORTFOLIO'), true);
				sme.materialItem = _currentMaterialItem;
				sme.addToPortolio = "true";
				dispatchEvent(sme);
			}			
			
			/**
			 * 
			 * Handles CREATION_COMPLETE event for this container
			 * 
			 **/
			protected function initGroup(event:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'CLOSE_TWEET_PORTFOLIO_PREVIEW'), handleCloseTweetPortfolioPreview);
				this.addEventListener(resourceManager.getString('resources', 'SHOW_FULLSCREEN_BUTTON_EVENT'), handleShowFullscreen);
			}
			
			/**
			 * 
			 * Handles CLOSE_TWEET_PORTFOLIO_PREVIEW event
			 * 
			 **/
			protected function handleCloseTweetPortfolioPreview(evt:Event):void {
				this.currentState = "tweetsState";
			}
			
			/**
			 * 
			 * Handles SHOW_FULLSCREEN event
			 * 
			 **/
			protected function handleShowFullscreen(evt:Event):void {
				var stfe:ShowFullscreenEvent = new ShowFullscreenEvent(resourceManager.getString('resources', 'SHOW_FULLSCREEN'), true);
				stfe.shouldShow = true;
				if(this.currentState == "tweetsState") {
					stfe.mode = "tweets";
					stfe.tweetsInView = tweetsViewer.tweetsForGroup;
				}
				else if(this.currentState == "simulation") {
					stfe.mode = "simulation";
				}
				dispatchEvent(stfe);
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default" />
		<s:State name="questionsState" />
		<s:State name="videoState" />
		<s:State name="imageState" />
		<s:State name="articleState" />
		<s:State name="tweetsState" />
	</s:states>
	
	<components:PreviewHeader width="100%" height="23" />
	<s:BorderContainer width="100%" height="100%" borderWeight="1" borderAlpha=".3">
		<s:Rect id="backgroundRect" left="0" right="0" top="0" bottom="0">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#DDDDDD" />
					<s:GradientEntry color="#FFFFFF" />
					<s:GradientEntry color="#FFFFFF" />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<preview:VideoViewer width="100%" height="100%" id="videoViewer" visible.default="false" visible.videoState="true" visible.questionsState="false" visible.imageState="false" visible.articleState="false" visible.tweetsState="false" />
		<preview:ImageViewer width="100%" height="100%" id="imageViewer" visible.default="false" visible.videoState="false" visible.questionsState="true" visible.imageState="true" visible.articleState="false" visible.tweetsState="false" />
		<preview:ArticleUploader width="100%" height="100%" id="articleUploader" includeIn="articleState" />
		<preview:TweetsViewer width="100%" height="100%" id="tweetsViewer" includeIn="tweetsState" />
		<s:Button id="sender" right="0" top="0" height="40" width="100" label="LEVER" buttonMode="true" click="sendPreviewedMaterial(event)" skinClass="skins.addToPortfolioButtonSkin" excludeFrom="tweetsState, questionsState, default" />
	</s:BorderContainer>	
</s:VGroup>
<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" contentBackgroundColor="#EEEEEE" borderAlpha=".3" borderWeight="3">
	
	<fx:Declarations>
		<fx:String id="groupId" />
		<fx:String id="taskId" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.jonas.net.Multipart;
			import com.pfp.events.JPEGAsyncCompleteEvent;
			import com.pfp.utils.JPEGAsyncEncoder;
			
			import components.Tweet;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ProgressBar;
			
			
			[Bindable] public var tweetsInView:ArrayCollection;
			
			private var asyncEncoder:JPEGAsyncEncoder;
			
			public function populateTweets(tweetsForGroup:Array, groupId:String, taskId:String):void {
				//do some cleaning before populating
				tweetsInView = new ArrayCollection();
				
				this.groupId = groupId;
				this.taskId = taskId;
				
				//build the correct arrays
				var tweet:Tweet;
				var tweetObject:Object;
				for each (var twt:Object in tweetsForGroup) {
					tweet = new Tweet();
					tweet.data = twt;
					
					//need to see if tweet is visisble
					if(twt.isVisible) {
						//place the tweets in the view
						tweetsInView.addItem(tweet);
					}
				}
				
				rebuildAllTweets();
			}
			
			
			/**
			 * 
			 * function to display all tweets
			 * 
			 **/
			protected function rebuildAllTweets():void {
				//refresh the view
				tweetsContainer.removeAllElements();
				
				for each (var tweet:Tweet in tweetsInView) {
					tweetsContainer.addElement(tweet);
				}
			}
			
			/**
			 * 
			 * function to display all tweets
			 * 
			 **/
			protected function saveTweetAreaPicture(event:MouseEvent):void {
				this.currentState = "encoding";
				var compositionBitmapData:BitmapData = new BitmapData(tweetsContainer.width,tweetsContainer.height);
				compositionBitmapData.draw(tweetsContainer);
				
				asyncEncoder = new JPEGAsyncEncoder(100);
				asyncEncoder.PixelsPerIteration = 128;
				asyncEncoder.addEventListener(ProgressEvent.PROGRESS, updateProgress);
				asyncEncoder.addEventListener(JPEGAsyncCompleteEvent.JPEGASYNC_COMPLETE, asyncComplete);
				asyncEncoder.encode(compositionBitmapData);
			}
			
			/**
			 * 
			 * function to handle encoding progress event
			 * 
			 **/
			private function updateProgress(event:ProgressEvent):void {
				pbar.setProgress(event.bytesLoaded, event.bytesTotal);
			}
			
			/**
			 * 
			 * function to handle image posting when encoding progress is complete
			 * 
			 **/
			private function asyncComplete(event:JPEGAsyncCompleteEvent):void {
				var form:Multipart = new Multipart(resourceManager.getString('resources', 'SERVER_URL')+"/image/"+groupId+"/"+taskId+"/3");
				form.addFile("picture", event.ImageData, "application/octet-stream", "test.jpg", true);
				
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, onComplete);
				try {
					loader.load(form.request);
				} catch (error: Error) {
					Alert.show("Unable to load requested document", "image upload error");
				}
			}
			
			/**
			 * 
			 * function called when image posting is complete
			 * 
			 **/
			protected function onComplete (e: Event):void {
				this.currentState = "default";
				dispatchEvent(new Event(resourceManager.getString('resources', 'REFRESH_TWEETS_PORTFOLIO'), true));
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default" />
		<s:State name="encoding" />
	</s:states>
	
	<s:Button top="0" right="0" label="Save" click="saveTweetAreaPicture(event)" />
	<s:Group width="100%" height="100%" id="tweetsContainer" />
	
	<s:SkinnableContainer width="100%" height="100%" backgroundAlpha=".8" backgroundColor="#333333" includeIn="encoding">
		<mx:ProgressBar id="pbar" horizontalCenter="0" verticalCenter="0" mode="manual" color="#ffffff"/>
	</s:SkinnableContainer>
</s:BorderContainer>

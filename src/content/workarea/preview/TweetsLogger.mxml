<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" contentBackgroundColor="#EEEEEE" borderAlpha=".3" borderWeight="3" creationComplete="initComponent(event)">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import listeners.EnergyChosenEvent;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.UIDUtil;
			
			import spark.components.Button;
			
			protected function initComponent(event:FlexEvent):void {
				refreshEnergies();
			}
			
			protected function getEnergySources_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving the energy sources from the server.", "Energy Sources service error");
			}
			
			protected function getEnergySources_resultHandler(event:ResultEvent):void {
				var res:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				
				var b:Button;
				
				for each (var nrj:Object in res) {
					b = new Button();
					b.name = nrj.id;
					b.label = nrj.energy;
					b.width = 100;
					b.height = 30;
					b.addEventListener(MouseEvent.CLICK, pickEnergy);
					energies.addElement(b);
					
					if(nrj.inuse) {
						b.enabled = false;
					}
					else {
						b.enabled = true;
					}
				}
			}
			
			protected function pickEnergy(evt:MouseEvent):void {
				bi.visible = true;
				
				var upurlRequest:URLRequest = new URLRequest(resourceManager.getString('resources', 'TWEET_SERVER_URL')+"/energySources");
				upurlRequest.method = URLRequestMethod.PUT;
				upurlRequest.contentType = "application/json";
				
				var statusObject:Object = new Object();
				statusObject.stat = "pick";
				token = UIDUtil.createUID();
				statusObject.token = token;
				statusObject.id = new String(evt.currentTarget.name);
				
				upurlRequest.data = com.adobe.serialization.json.JSON.encode(statusObject);
				var uploader:URLLoader = new URLLoader();
				uploader.addEventListener(Event.COMPLETE, upcompleteHandler);
				uploader.load(upurlRequest);
			}
			
			private function upcompleteHandler(ev:Event):void {
				bi.visible = false;
				var res:Object = com.adobe.serialization.json.JSON.decode(String(ev.target.data));
				
				if(res.inuse && this.token == res.token) {
					var ece:EnergyChosenEvent = new EnergyChosenEvent(resourceManager.getString('resources', 'ENERGY_CHOSEN'), true);
					ece.energyId = res.id;
					ece.energyTitle = res.energy;
					dispatchEvent(ece);
				}
				else {
					refreshEnergies();
				}
			}
			
			private function refreshEnergies():void {
				energies.removeAllElements();
				getEnergySources.url = resourceManager.getString('resources', 'TWEET_SERVER_URL') + "/energySources";
				getEnergySources.send();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:String id="token" />
		<s:HTTPService method="GET" headers="{'pragma', 'no-cache'}" result="getEnergySources_resultHandler(event)" fault="getEnergySources_faultHandler(event)" resultFormat="text" id="getEnergySources" />
	</fx:Declarations>
	
	<s:TileGroup width="70%" id="energies" horizontalCenter="0" verticalCenter="0" horizontalGap="20" verticalGap="20" />
	
	<s:BorderContainer visible="false" width="100%" height="100%" backgroundColor="#333333" backgroundAlpha=".7" id="bi">
		<s:BusyIndicator width="50" height="50" horizontalCenter="0" verticalCenter="0" symbolColor="#FFFFFF" />
	</s:BorderContainer>
</s:BorderContainer>

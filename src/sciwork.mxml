<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:local="*" creationComplete="initApp(event)" showStatusBar="false">
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.net.dns.AAAARecord;
			
			import listeners.LoginAcceptedEvent;
			import listeners.SceneChangeEvent;
			import listeners.TabbarLoadedEvent;
			import listeners.TaskChangeEvent;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			public static const _gapBetweenContainers:Number = 15;
			
			[Bindable] private var _completedTaskArray:Array;
			
			private var _currentGroup:Object;
			
			/**
			 *
			 * Called when application creation is complete
			 * 
			 **/
			protected function initApp(event:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'SERVER_URL'), handleLoginAccepted);
				this.addEventListener(resourceManager.getString('resources', 'SCENE_CHANGED'), handleSceneChange);
				this.addEventListener(resourceManager.getString('resources', 'TASK_CHANGED'), handleTaskChange);
				this.addEventListener(resourceManager.getString('resources', 'TABBAR_LOADED'), handleMenuLoaded);
				
				// FOR TESTING: In the case of no server connection
				// this.currentState = "loggedIn";
			}
			
			/**
			 *
			 * Function to return the current selected group
			 * 
			 **/
			public function get currentGroup():Object {
				return _currentGroup;
			}
			
			/**
			 *
			 * Event handling method when login is OK
			 * 
			 **/
			protected function handleLoginAccepted(evt:LoginAcceptedEvent):void {
				//this needs to be assigned before we change the application's state
				_currentGroup = evt.selectedGroup;
				refreshGroupsCompletedTasks();
			}
			
			/**
			 *
			 * Method to (re)load completed tasks by this group
			 * 
			 **/
			protected function refreshGroupsCompletedTasks():void {
				getCompletedTasks.url =  resourceManager.getString('resources', 'SERVER_URL') + "/tasksCompleted/" + _currentGroup.id;
				getCompletedTasks.send();
			}
			
			/**
			 *
			 * Event handling method for scene change
			 * 
			 **/
			protected function handleSceneChange(evt:SceneChangeEvent):void {
				tabBar.taskBar.selectedIndex = -1;
				
				if(evt.eventOrigin == SceneChangeEvent.FOOTER) {
					tabBar.sceneBar.selectedItem = evt.scene;
					tabBar.selectFirstTask(evt.sceneIndex);
				}
				
				//update footer bar
				footer.updateSelectedFooterScene(evt.scene);
								
				var currentInterface:String = "studentInterface";
				if(this.currentState == "loggedInTeacher") {
					currentInterface = "teacherInterface";					
				}
				
				this[currentInterface].changeScene(evt.scene.label);
			}
			
			/**
			 *
			 * Event handling method for task change 
			 * 
			 **/
			protected function handleTaskChange(evt:TaskChangeEvent):void {
				var currentInterface:String = "studentInterface";
				if(this.currentState == "loggedInTeacher") {
					currentInterface = "teacherInterface";					
				}
				
				this[currentInterface].changeTask(evt.taskId, currentGroup);
			}
			
			/**
			 *
			 * Event handling method for login out
			 * 
			 **/
			private function logout(event:MouseEvent):void {
				var currentInterface:String = "studentInterface";
				if(this.currentState == "loggedInTeacher") {
					currentInterface = "teacherInterface";					
				}
				
				this[currentInterface].stopPlayingMedia();
				this.currentState = "loggedOff";
			}
			
			/**
			 *
			 * Event handling method for building the trajectory in the footer 
			 * 
			 **/
			private function handleMenuLoaded(evt:TabbarLoadedEvent):void {
				footer.buildTrajectory(evt.menu, evt.menu[0]);
			}
			
			/**
			 * 
			 * Error handling method for getCompletedTasks service
			 * 
			 **/
			protected function getCompletedTasks_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving completed tasks from the server.", "Completed tasks service error");
			}
			
			/**
			 *
			 * Result handling method for getCompletedTasks service 
			 * 
			 **/
			protected function getCompletedTasks_resultHandler(event:ResultEvent):void {
				//store the returned object as JSON 
				_completedTaskArray = com.adobe.serialization.json.JSON.decode(String(event.result));
				
				if(_currentGroup.id == resourceManager.getString('resources', 'TEACHER_LOGIN_ID')) {
					this.currentState = "loggedInTeacher";
				}
				else {
					this.currentState = "loggedIn";
					footer.updateCompletedTasks();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:HTTPService method="GET" result="getCompletedTasks_resultHandler(event)" fault="getCompletedTasks_faultHandler(event)" resultFormat="text" id="getCompletedTasks" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="loggedOff" />
		<s:State name="loggedIn" />
		<s:State name="loggedInTeacher" />
	</s:states>
	
	<s:Button label="LOGG UT" click="logout(event)" right="0" top="0" skinClass="skins.logoutButton" excludeFrom="loggedOff" itemDestructionPolicy="auto" buttonMode="true" />
	<s:VGroup width="995" height="600" horizontalCenter="0" verticalCenter="0">
		
		<!-- Header banner component -->
		<local:Header excludeFrom="loggedOff" itemDestructionPolicy="auto" />
		
		<!-- Logging component -->
		<local:GroupLogger id="groupLogger" width="100%" height="100%" includeIn="loggedOff" itemDestructionPolicy="auto" />
		
		
		<s:BorderContainer width="100%" height="100%" borderColor="#eeeeee" cornerRadius="4" borderAlpha=".3" excludeFrom="loggedOff">
			<s:filters>
				<s:DropShadowFilter 
					distance="3" alpha=".3" blurX="7" blurY="7"
					angle="90" />
			</s:filters>
			
			<s:VGroup width="100%" height="100%">
				<!-- Tabbar component -->
				<local:Tabbar id="tabBar" width="100%" excludeFrom="loggedOff" itemDestructionPolicy="auto"/>
				
				<s:Group width="100%" height="100%">
					<!-- Student space -->
					<local:StudentInterface id="studentInterface" includeIn="loggedIn" top="{_gapBetweenContainers}" right="{_gapBetweenContainers}" bottom="{_gapBetweenContainers}" left="{_gapBetweenContainers}" itemDestructionPolicy="auto"></local:StudentInterface>
				
					<!-- Teacher space -->
					<local:TeacherInterface id="teacherInterface" includeIn="loggedInTeacher" top="{_gapBetweenContainers}" right="{_gapBetweenContainers}" bottom="{_gapBetweenContainers}" left="{_gapBetweenContainers}" itemDestructionPolicy="auto">
						<s:Label text="welcome teacher" horizontalCenter="0" verticalCenter="0" />
					</local:TeacherInterface>
				</s:Group>
			</s:VGroup>
		</s:BorderContainer>
	</s:VGroup>
	
	<!-- Footer navigation component -->
	<local:Footer id="footer" bottom="0" left="0" includeIn="loggedIn,loggedInTeacher" completedTasks="{_completedTaskArray}" />
</s:WindowedApplication>

<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" creationComplete="init(event)">
	<fx:Declarations>
		<s:HTTPService method="GET" result="getSceneContributions_resultHandler(event)" fault="getSceneContributions_faultHandler(event)" resultFormat="text" id="getSceneContributions" showBusyCursor="true" />
		<s:HTTPService method="GET" result="getTaskPortfolioComment_resultHandler(event)" fault="getTaskPortfolioComment_faultHandler(event)" resultFormat="text" id="getTaskPortfolioComment" showBusyCursor="true" />
		<s:HTTPService url="{resourceManager.getString('resources', 'SERVER_URL')+'/groupInfo'}" method="GET" result="getAllGroups_resultHandler(event)" fault="getAllGroups_faultHandler(event)" resultFormat="text" id="getAllGroups" />
		<fx:Object id="currentGroup" />
		<fx:Object id="currentTask" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import content.workarea.materials.MaterialsItem;
			
			import flash.text.engine.TabAlignment;
			
			import listeners.MaterialToPreviewEvent;
			import listeners.ShowFullscreenEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var _groupNameList:ArrayCollection;
			[Bindable] private var _groupList:ArrayCollection;
			private var groupsLoaded:Boolean = false;
			public static const VIDEO_TYPE:String = "VIDEO_TYPE";
			public static const IMAGE_TYPE:String = "IMAGE_TYPE";
			public static const PORTFOLIO_TYPE:String = "PORTFOLIO";

			// Data includes URL to album cover.
/*			[Bindable]
			private var actualCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var sampleCollection:ArrayCollection = new ArrayCollection([
				{Task:'Question 1', Complete:'Complete', Images:["assets/simu/pics/crossBG.png"]},
				{Task:'Question 2', Complete:'Incomplete', Images:["assets/simu/pics/stop.png", "assets/simu/pics/start.png"]},
				{Task:'Question 1', Complete:'Complete', Images:["assets/fs.png"]},
				{Task:'Question 2', Complete:'Complete', Images:["assets/7.png"]},
				{Task:'Question 3', Complete:'Incomplete', Images:["assets/trash.png"]}
			]);
*/			
			private function init(event:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'MATERIAL_TO_PREVIEW'), handleMaterialFullscreenRequest);
				getAllGroups.send();
			}
			public function setTask(task:Object):void {
				currentTask = task;
				if(groupsLoaded)
					refreshData(groupSelector.selectedIndex);
			}
			private function changeHandlerProgrammatic(event:FlexEvent):void {
				if(groupsLoaded)
					refreshData(groupSelector.selectedIndex);
			} 
			private function refreshData(selectedGroupIndex:int):void {
				materialItems.removeAllElements();
				comment.text = "";
				
				getSceneContributions.url = resourceManager.getString('resources', 'SERVER_URL') + "/sceneContributions/" + _groupList[selectedGroupIndex].id + "/" + currentTask.portFolioSceneId;
				getSceneContributions.send();
				
				getTaskPortfolioComment.url = resourceManager.getString('resources', 'SERVER_URL') + "/finalPortfolioTaskComment/" + _groupList[selectedGroupIndex].id + "/" + currentTask.id;
				getTaskPortfolioComment.send();
			}
			
			/**
			 *
			 * Result handling method for getSceneContributions service 
			 * 
			 **/
			protected function getSceneContributions_resultHandler(event:ResultEvent):void {
				//store the returned object as JSON 
				var contributions:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				
				parseMaterialSubArray(contributions.svideos, VIDEO_TYPE);
				parseMaterialSubArray(contributions.simages, IMAGE_TYPE);
			}
			/**
			 *
			 * Parsing method to assign retrieved material to a correct preview item
			 * 
			 **/
			protected function parseMaterialSubArray(subArray:Array, materialType:String):void {
				var newItem:MaterialsItem;
				
				//extract materials
				for each (var material:Object in subArray) {
					if(material.isFinalPortfolio) {
						newItem = new MaterialsItem();
						newItem.sourceType = PORTFOLIO_TYPE;
						newItem.isFinalPortfolio = material.isFinalPortfolio;
						newItem.isPortfolio = material.isPortfolio;
						newItem.xpos = material.xpos;
						newItem.ypos = material.ypos;
						newItem.deleter.visible = false;
						newItem.deleter.includeInLayout = false;
						
						materialItems.addElement(newItem);
						
						//assign id
						newItem.id = material.id;
						
						//pick correct preview type
						switch(materialType) {
							case VIDEO_TYPE:
								newItem.setupPreview(VIDEO_TYPE, material.uri, resourceManager.getString('resources', 'YOUTUBE_BASE_IMAGE_URL')+material.uri+"/1.jpg");
								break;
							case IMAGE_TYPE:
								newItem.setupPreview(IMAGE_TYPE, resourceManager.getString('resources', 'SERVER_URL')+material.filePath, resourceManager.getString('resources', 'SERVER_URL')+material.filePath);
								break;
						}
					}
				}
			}
			/**
			 *
			 * Result handling method for getAllGroups service 
			 * 
			 **/
			protected function getAllGroups_resultHandler(event:ResultEvent):void {
				//store the returned object as JSON
				var res:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				
				//instantiate and build group array
				_groupList = new ArrayCollection();
				for each (var act:Object in res) {
					// Exclude the teacher from this listing
					if(act.id != "506c21c742060774910aeb8b")
						_groupList.addItem({label: act.name, id: act.id, color: act.colour});
				}
				
				//ordering the list alphabetically
				var sortfield:SortField = new SortField();
				sortfield.name = "title";
				sortfield.descending = false;
				
				var sort:Sort = new Sort();
				sort.fields = [sortfield];
				
				_groupList.sort = sort;
				_groupList.refresh();
				
				groupSelector.selectedIndex = 0;
				groupsLoaded = true;
			//	refreshData(0);
			}
			/**
			 *
			 * Error handling method for getAllGroups service 
			 * 
			 **/
			protected function getAllGroups_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving group names from the server.", "Group service error");
			}
			/**
			 * 
			 * Error handling method for getSceneContributions service
			 * 
			 **/
			protected function getSceneContributions_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving the scenecontributions assets from the server.", "SceneContribution service error");
			}
			
			/**
			 * 
			 * Error handling method for getTaskPortfolioComment service
			 * 
			 **/
			protected function getTaskPortfolioComment_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving the taskportfoliocomments from the server.", "TaskPortfolioComment service error");
			}
			
			/**
			 *
			 * Result handling method for getTaskPortfolioComment service 
			 * 
			 **/
			protected function getTaskPortfolioComment_resultHandler(event:ResultEvent):void {
				var comments:Array = com.adobe.serialization.json.JSON.decode(String(event.result));
				
				if(comments.length > 0)
					comment.text = comments[0].text;
			}
			/**
			 * 
			 * Event handling method for MATERIAL_TO_PREVIEW
			 * 
			 **/
			protected function handleMaterialFullscreenRequest(evt:MaterialToPreviewEvent):void {
				var stfe:ShowFullscreenEvent = new ShowFullscreenEvent(resourceManager.getString('resources', 'SHOW_FULLSCREEN'), true);
				stfe.shouldShow = true;
				stfe.mode = "picsvids";
				stfe.showPullOutMenu = false;
				stfe.material = evt.materialItem;
				dispatchEvent(stfe);
			}

		]]>
	</fx:Script> 
	
	<!--s:ButtonBar id="groupSelector" width="100%" labelField="title" dataProvider="_groupList" skinClass="skins.taskOverviewButtonBarSkin" buttonMode="true" requireSelection="true" /-->
	<s:TabBar id="groupSelector" width="{this.width}" dataProvider="{_groupList}" top="-21" skinClass="skins.groupTabBarSkin" valueCommit="changeHandlerProgrammatic(event)" requireSelection="true">
		<s:filters>
			<s:DropShadowFilter 
				distance="3" alpha=".3" blurX="7" blurY="7"
				angle="90" />
		</s:filters>
	</s:TabBar>
	<s:VGroup width="100%" height="100%" top="20" gap="15">
		<s:BorderContainer id="materials" width="100%" height="50%" borderAlpha=".3" >
			<s:Scroller top="5" right="5" bottom="5" left="5">
				<s:HGroup id="materialItems" />
			</s:Scroller>
		</s:BorderContainer>
		<s:TextArea id="comment" editable="false" width="100%" height="50%" borderAlpha=".3"/>
	</s:VGroup>
	<!--s:DataGrid id="materialGrid" dataProvider="{sampleCollection}" variableRowHeight="true" width="100%" height="90%" top="10">

		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="Task" width="{this.materialGrid.width * 0.1}"/>
				<s:GridColumn dataField="Materials"  itemRenderer="itemRenderers.PortfolioItemRenderer"/>
			</s:ArrayList>
		</s:columns>       
	</s:DataGrid-->
		
</s:Group>

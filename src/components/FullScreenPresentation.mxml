<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:listeners="listeners.*" xmlns:simulation="simulation.*" xmlns:components="components.*" borderVisible="false" scrollRect="{new Rectangle(0,0,1000,600)}" creationComplete="init(event)">
	<fx:Declarations>
		<s:HTTPService method="GET" headers="{'pragma', 'no-cache'}" result="getQuestions_resultHandler(event)" fault="getQuestions_faultHandler(event)" resultFormat="text" id="getQuestions" showBusyCursor="true" />
		<s:HTTPService method="GET" headers="{'pragma', 'no-cache'}" result="getTweets_resultHandler(event)" fault="getTweets_faultHandler(event)" resultFormat="text" id="getTweets" showBusyCursor="true" />
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import com.jonas.net.Multipart;
			import com.pfp.events.JPEGAsyncCompleteEvent;
			import com.pfp.utils.JPEGAsyncEncoder;
			import com.seesmic.as3.xmpp.XMPP;
			import com.adobe.serialization.json.JSON;
			
			import content.workarea.TeacherWorkArea;
			import content.workarea.WorkArea;
			
			import listeners.CaptureFullscreenEvent;
			import listeners.ObjectDropEvent;
			import listeners.QuestionsRefreshEvent;
			import listeners.ShowFullscreenEvent;
			import listeners.TweetsRefreshEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.UIDUtil;
			
			private var sciApp:sciwork = mx.core.FlexGlobals.topLevelApplication as sciwork;
			[Bindable] private var _htmlLocation:String = "";
			[Bindable] private var _conn:XMPP = null;
			private var asyncEncoder:JPEGAsyncEncoder;
			
			private var groupId:String;
			private var taskId:String;
			private var questionsForGroup:Array;
			private var tweetsForGroup:Array;
			
			/**
			 *
			 * Initialise the component 
			 * 
			 **/
			public function init(evt:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'CAPTURE_FULLSCREEN'), captureScreen);
				this.addEventListener(resourceManager.getString('resources', 'REFRESH_QUESTIONS'), refreshQuestions);
				this.addEventListener(resourceManager.getString('resources', 'REFRESH_TWEETS'), refreshTweets);
			}
			
			
			/**
			 *
			 * Event handling method to display various fullscreen information 
			 * 
			 **/
			public function handleShowFullscreen(evt:ShowFullscreenEvent, scene:Object, task:Object, conn:XMPP):void {
				_conn = conn;
				groupId = scene.sceneId;
				taskId = task.taskId;
				if(evt.shouldShow) {
					this.visible = true;
					this.includeInLayout = true;
					if(evt.mode == "tweets" && (evt.shouldShow || this.currentState == "tweets")) {
						pullOutMenu.visible = true;
						this.currentState = "tweets";
						//refresh the view
						presentationGroupArea.removeAllElements();
						
						//build the correct arrays
						var tweet:Tweet;
						var tweetObject:Object;
						for each (var twt:Object in evt.tweetsInView) {
							tweet = new Tweet();
							tweet.data = twt;
							tweet.conn = _conn;
							
							//need to see if tweet is visisble
							if(twt.isVisible) {
								//place the tweets in the view
								presentationGroupArea.addElement(tweet);
							}
						}
					}
					else if(evt.mode == "teacherTweets") {
						this.currentState = "teacherTweets";
						presentationGroupArea.removeAllElements();
						pullOutMenu.visible = true;
						dispatchEvent(new TweetsRefreshEvent(resourceManager.getString('resources', 'REFRESH_TWEETS'), true));
					}
					else if(evt.mode == "teacherQuestions") {
						this.currentState = "teacherQuestions";
						presentationGroupArea.removeAllElements();
						pullOutMenu.visible = true;
						dispatchEvent(new QuestionsRefreshEvent(resourceManager.getString('resources', 'REFRESH_QUESTIONS'), true));
					}
					else if(evt.mode == "simulation") {
						this.currentState = "simulation";
						pullOutMenu.visible = false;
						simulate.setSimulationLevel(task.label);
						
					}
					else if(evt.mode == "html") {
						pullOutMenu.visible = false;
						this.currentState = "html";
						URLRequestDefaults.userAgent = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; en-us) AppleWebKit/533.17.8 (KHTML, like Gecko) Version/5.0.1 Safari/533.17.8";
						_htmlLocation = evt.url;
						htmlBI.visible = true;
					}
					else if(evt.mode == "ipad") {
						pullOutMenu.visible = false;
						this.currentState = "ipad";
						ipadPresentation.initContainer();
					}
					else if(evt.mode == "picsvids") {
						pullOutMenu.visible = evt.showPullOutMenu;
						this.currentState = "picsvids";
						videoPicturePresentationContainer.previewMaterial(evt.material);
					}
				}
			}

			public function callHideFullscreen(evt:MouseEvent):void {
				//need to quit ipad session if any
				if(this.currentState == "ipad") {
					ipadPresentation.disconnectCurrentSource(true);
				}
				
				var stfe:ShowFullscreenEvent = new ShowFullscreenEvent(resourceManager.getString('resources', 'SHOW_FULLSCREEN'), true);
				stfe.shouldShow = false;
				dispatchEvent(stfe);
				pullOutMenu.closeTheDrawer();
			}
			/**
			 *
			 * Event handling method to close fullscreen
			 * 
			 **/
			public function handeHideFullScreen(event:Event):void {
				if(this.currentState == "html")
					_htmlLocation='';
				else if(this.currentState == "tweets")
					sciApp.dispatchEventToWorkArea(new TweetsRefreshEvent(resourceManager.getString('resources', 'REFRESH_TWEETS'), true));
				this.visible=false;
				this.includeInLayout = false;
				this.currentState = "disabled";
			}
			/**
			 * 
			 * Calls the questions service to get all questions
			 * 
			 **/
			protected function refreshQuestions(evt:QuestionsRefreshEvent = null):void {
				//get existing questions
				getQuestions.url = resourceManager.getString('resources', 'TWEET_SERVER_URL') + "/teacherTweet/" + taskId;
				getQuestions.send();
			}
			/**
			 * 
			 * Calls the tweet service to get all tweets for current group
			 * 
			 **/
			protected function refreshTweets(evt:TweetsRefreshEvent):void {
				//get existing tweets for the current task and group
				getTweets.url = resourceManager.getString('resources', 'TWEET_SERVER_URL') + "/teacherTweet/" + taskId;
				getTweets.send();
			}
			/**
			 *
			 * Result handling method for getQuestions service 
			 * 
			 **/
			protected function getQuestions_resultHandler(event:ResultEvent):void {
				if(event.result != "") {
					questionsForGroup = com.adobe.serialization.json.JSON.decode(String(event.result));
					//build the correct arrays
					var tweet:Tweet;
					for each (var twt:Object in questionsForGroup) {
						tweet = new Tweet();
						tweet.data = twt;
						tweet.conn = _conn;
						if(this.currentState == "teacherQuestions")
							tweet.teacherMode = true;
						
						//need to see if tweet is visisble
						if(twt.isVisible) {
							//place the tweets in the view
							presentationGroupArea.addElement(tweet);
						}
					}
				}
			}
			/**
			 *
			 * Result handling method for getTweets service 
			 * 
			 **/
			protected function getTweets_resultHandler(event:ResultEvent):void {
				if(event.result != "") {
					tweetsForGroup = com.adobe.serialization.json.JSON.decode(String(event.result));
					//build the correct arrays
					var tweet:Tweet;
					for each (var twt:Object in tweetsForGroup) {
						tweet = new Tweet();
						tweet.data = twt;
						tweet.conn = _conn;
						if(this.currentState == "teacherTweets")
							tweet.teacherMode = true;
						
						//need to see if tweet is visisble
						if(twt.isVisible) {
							//place the tweets in the view
							presentationGroupArea.addElement(tweet);
						}
					}
				}
			}
			/**
			 * 
			 * Error handling method for getTweets service
			 * 
			 **/
			protected function getQuestions_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving the questions from the server.", "Questions service error");
			}
			/**
			 * 
			 * Error handling method for getTweets service
			 * 
			 **/
			protected function getTweets_faultHandler(event:FaultEvent):void {
				Alert.show("An error occured while retrieving the tweets from the server.", "Tweets service error");
			}
			/**
			 * 
			 * Function to hide the busyindicator after html page has loaded
			 * 
			 **/
			protected function htmlLoded(event:Event):void {
				htmlBI.visible = false;
			}
			
			/**
			 * 
			 * function to save the groupcontainer as a picture
			 * 
			 **/
			private function captureScreen(event:CaptureFullscreenEvent):void {
				pullOutMenu.pbar.visible = true;
				pullOutMenu.pbar.includeInLayout = true;
				pullOutMenu.screenCaptureButton.visible = false;
				pullOutMenu.screenCaptureButton.includeInLayout = false;
				var compositionBitmapData:BitmapData = new BitmapData(this.width,this.height);
				compositionBitmapData.draw(this);
				
				asyncEncoder = new JPEGAsyncEncoder(100);
				asyncEncoder.PixelsPerIteration = 128;
				asyncEncoder.addEventListener(ProgressEvent.PROGRESS, updateProgress);
				asyncEncoder.addEventListener(JPEGAsyncCompleteEvent.JPEGASYNC_COMPLETE, asyncComplete);
				asyncEncoder.encode(compositionBitmapData);
			}
			
			/**
			 * 
			 * function to handle encoding progress event
			 * 
			 **/
			private function updateProgress(event:ProgressEvent):void {
				pullOutMenu.pbar.setProgress(event.bytesLoaded, event.bytesTotal);
			}
			
			/**
			 * 
			 * function to handle image posting when encoding progress is complete
			 * 
			 **/
			private function asyncComplete(event:JPEGAsyncCompleteEvent):void {
				var form:Multipart = new Multipart(resourceManager.getString('resources', 'SERVER_URL')+"/image/"+groupId+"/"+taskId+"/3");
				form.addFile("picture", event.ImageData, "application/octet-stream", UIDUtil.createUID()+".jpg", true);
				
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, onComplete);
				try {
					loader.load(form.request);
				} catch (error: Error) {
					Alert.show("Unable to load requested document", "image upload error");
					pullOutMenu.pbar.visible = false;
					pullOutMenu.pbar.includeInLayout = false;
					pullOutMenu.screenCaptureButton.visible = true;
					pullOutMenu.screenCaptureButton.includeInLayout = true;
				}
			}
			
			/**
			 * 
			 * function called when image posting is complete
			 * 
			 **/
			protected function onComplete (e: Event):void {
				pullOutMenu.pbar.visible = false;
				pullOutMenu.pbar.includeInLayout = false;
				pullOutMenu.screenCaptureButton.visible = true;
				pullOutMenu.screenCaptureButton.includeInLayout = true;
				
				dispatchEvent(new Event(resourceManager.getString('resources', 'REFRESH_TWEETS_PORTFOLIO'), true));
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="disabled" />
		<s:State name="tweets" />
		<s:State name="teacherQuestions" />
		<s:State name="teacherTweets" />
		<s:State name="html" />
		<s:State name="simulation" />
		<s:State name="picsvids" />
		<s:State name="ipad" />
	</s:states>
	
	<s:filters>
		<s:DropShadowFilter 
			distance="3" alpha=".3" blurX="7" blurY="7"
			angle="90" />
	</s:filters>
	
	<!--s:Image source="assets/topBar.png" x="0" y="0" id="topBar" /-->
	<s:VGroup width="100%" height="100%" gap="0">
		<s:SkinnableContainer width="100%" height="40" skinClass="skins.sectionHeaderSkin" excludeFrom="simulation" />
		<s:Group height="100%" width="1000" clipAndEnableScrolling="true">
			<s:Group includeIn="tweets, teacherQuestions, teacherTweets" width="100%" height="100%" >
				<s:Group width="100%" height="100%" id="presentationGroupArea" />
			</s:Group>
			<s:Group includeIn="html" width="100%" height="100%">
				<mx:HTML id="htmlLoader" width="100%" height="100%" location="{_htmlLocation}" complete="htmlLoded(event)" />
				<s:BusyIndicator verticalCenter="0" horizontalCenter="0" id="htmlBI" />
			</s:Group>
			<s:Group includeIn="simulation" width="100%" height="100%" >
				<simulation:Sim id="simulate" x="2" y="-30" />
			</s:Group>
			<components:VideoPicturePresentationContainer id="videoPicturePresentationContainer" visible.disabled="false" visible.tweets="false" visible.teacherQuestions="false" visible.teacherTweets="false" visible.html="false" visible.simulation="false" visible.ipad="false" visible.picsvids="true" width="100%" height="100%" />
			<components:IPadPresentationContainer id="ipadPresentation" includeIn="ipad" width="100%" height="100%" conn="{_conn}" />
			<components:PullOutMenu id="pullOutMenu" height="518" x="1000" excludeFrom="html" />
		</s:Group>
	</s:VGroup>
	<s:Button label="X" click="callHideFullscreen(event)" right="10" top="5" width="30"/>
</s:BorderContainer>

<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" backgroundColor="{uint(mx.core.FlexGlobals.topLevelApplication.currentGroup.colour)}" creationComplete="creationCompleteHandler(event)" width="150" minHeight="30" cornerRadius="5">
	
	<fx:Declarations>
		<fx:Object id="data" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.seesmic.as3.xmpp.XMPP;
			
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			
			import listeners.TweetUpdaterEvent;
			import listeners.TweetsRefreshEvent;
			
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			
			private var oldX:Number;
			private var oldY:Number;
			
			private var _conn:XMPP;
			
			[Bindable]
			[Embed(source="assets/drag.png")]
			private var DragIcon:Class;
			
			private var cursorId:int;
			
			private var refreshTimer:Number;
			
			[Bindable] private var ownerColor:uint;
			
			/**
			 *
			 * Called when itemrenderer creation is complete
			 * 
			 **/
			protected function creationCompleteHandler(event:FlexEvent):void {
				this.x = data.xpos;
				this.y = data.ypos;
				
				//build context menu to trash/restore tweets
				var cm:ContextMenu = new ContextMenu();
				cm.hideBuiltInItems();
				var selectMI:ContextMenuItem = new ContextMenuItem("");
				if(data.isVisible) {
					selectMI.label = "Move to Trash";
				
					//show a add to portfolio menu item too
					var addToPortfolioMI:ContextMenuItem = new ContextMenuItem("");
					if(data.isPortfolio) {
						addToPortfolioMI.label = "Remove from Portfolio";
					}
					else {
						addToPortfolioMI.label = "Add to Portfolio";
					}
					addToPortfolioMI.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addToPortfolioMIHandler);
					cm.customItems.push(addToPortfolioMI);
				
				}
				else {
					selectMI.label = "Restore";
				}
				selectMI.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, selectMIHandler);
				
				//add the menu items to the right click menu
				cm.customItems.push(selectMI);
				
				//enable the right click menu
				this.contextMenu = cm;
				
				//make this thingy draggable
				enableListeners(true);
				
				//check if current group is the owner
				if(data.userName != data.ownerName) {
					ownerColor = sciwork.getColorBasedOnGroup(data.ownerName);
					this.currentState = "isNotOwner";
				}
			}
			
			/**
			 *
			 * Called when addToPortfolioMI item is clicked
			 * 
			 **/
			protected function addToPortfolioMIHandler(event:ContextMenuEvent):void {
				data.isPortfolio = !data.isPortfolio;
				updateTweet();
			}
			
			/**
			 *
			 * Function to enable/disable listeners
			 * 
			 **/
			protected function enableListeners(b:Boolean):void {
				if(b) {
					this.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler, false, 0, false);
					this.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler, false, 0, false);
					this.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, false);
					this.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, false);
				}
				else {
					this.removeEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
					this.removeEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
					this.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					this.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				}
			}
			
			/**
			 *
			 * Called when mouse is pressed on this item
			 * 
			 **/
			protected function mouseDownHandler(event:MouseEvent):void {
				//we log the old X and Y, in case the service cannot accept the move
				oldX = this.x;
				oldY = this.y;
				
				//start dragging
				this.startDrag(false, new Rectangle(0, 0, this.parent.width-this.width, this.parent.height-this.height));
			}
			
			/**
			 *
			 * Called when mouse is released on this item
			 * 
			 **/
			protected function mouseUpHandler(event:MouseEvent):void {
				//stop dragging
				this.stopDrag();
				//update the new position with the server
				data.xpos = this.x;
				data.ypos = this.y;
				
				updateTweet();
			}
			
			protected function updateTweet():void {
				enableListeners(false);
				var tu:TweetUpdater = new TweetUpdater();
				tu.addEventListener(TweetUpdaterEvent.UPDATE_SUCCESSFUL, handleUpdateSuccessful);
				tu.addEventListener(TweetUpdaterEvent.UPDATE_FAILED, handleUpdateFailure);
				tu.postTweetToService(resourceManager.getString('resources', 'TWEET_SERVER_URL')+"/tweet", data);
			}
			
			/**
			 *
			 * Called when the tweetUpdater is successful
			 * 
			 **/
			protected function handleUpdateSuccessful(evt:TweetUpdaterEvent):void {
				//it's all good
				dispatchEvent(new TweetsRefreshEvent(resourceManager.getString('resources', 'REFRESH_TWEETS'), true));
				enableListeners(true);	
				CursorManager.removeAllCursors();
			}
			
			
			/**
			 *
			 * Called when the tweetUpdater fails
			 * 
			 **/
			protected function handleUpdateFailure(evt:TweetUpdaterEvent):void {
				//something went wrong with the service, reposition the item to its last known position
				this.x = oldX;
				this.y = oldY;
				enableListeners(true);
			}
			
			/**
			 *
			 * Called when mouse rolls over this item
			 * 
			 **/
			protected function mouseOverHandler(event:MouseEvent):void {
				cursorId = CursorManager.setCursor(DragIcon);
			}
			
			/**
			 *
			 * Called when rolls out of this item
			 * 
			 **/
			protected function mouseOutHandler(event:MouseEvent):void {
				CursorManager.removeCursor(cursorId);
			}
			
			/**
			 *
			 * Called when double-click on this item occurs
			 * 
			 **/
			protected function selectMIHandler(event:ContextMenuEvent):void {
				data.isVisible = !data.isVisible;
				updateTweet();
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="isOwner" />
		<s:State name="isNotOwner" />
	</s:states>
	
	<s:HGroup left="10" right="10" top="10" bottom="10">
		<s:Rect width="10" height="10" includeIn="isNotOwner">
			<s:fill>
				<s:SolidColor color="{ownerColor}" />
			</s:fill>
		</s:Rect>
		<s:Label text="{data.text}" color="#FFFFFF" width="100%" textAlign="left" />
	</s:HGroup>
</s:BorderContainer>
